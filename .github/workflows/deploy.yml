name: 部署到 GitHub Pages

on:
  # 在推送到 main 分支时触发
  push:
    branches: [ main ]
  
  # 允许手动触发工作流
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一个并发部署，跳过正在运行和最新排队之间的运行
# 但是，不要取消正在进行的运行，因为我们希望让这些生产部署完成
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 构建作业
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 检测包管理器
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "无法检测到支持的包管理器"
            exit 1
          fi

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: 设置 Pages
        uses: actions/configure-pages@v4
        with:
          # 自动检测生成器配置，也可以手动指定
          static_site_generator: vite

      - name: 安装依赖
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: 运行代码检查
        run: ${{ steps.detect-package-manager.outputs.runner }} eslint .
        continue-on-error: true

      - name: 运行测试
        run: ${{ steps.detect-package-manager.outputs.runner }} vitest run
        continue-on-error: true

      - name: 构建项目
        run: ${{ steps.detect-package-manager.outputs.runner }} npm run build

      - name: 上传构建产物
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  # 部署作业
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
